// Code generated by dbus-codegen-go DO NOT EDIT.
package main

import (
	"context"
	"errors"
	"fmt"
	"github.com/sakura-remote-desktop/godbus/v5"
)

// Signal is a common interface for all signals.
type Signal interface {
	Name() string
	Interface() string
	Sender() string

	path() dbus.ObjectPath
	values() []interface{}
}

// ErrUnknownSignal is returned by LookupSignal when a signal cannot be resolved.
var ErrUnknownSignal = errors.New("unknown signal")

// LookupSignal converts the given raw D-Bus signal with variable body
// into one with typed structured body or returns ErrUnknownSignal error.
func LookupSignal(signal *dbus.Signal) (Signal, error) {
	switch signal.Name {
	case InterfaceObjectManager + "." + "InterfacesAdded":
		v0, ok := signal.Body[0].(dbus.ObjectPath)
		if !ok {
			return nil, fmt.Errorf("prop .Object is %T, not dbus.ObjectPath", signal.Body[0])
		}
		v1, ok := signal.Body[1].(map[string]map[string]dbus.Variant)
		if !ok {
			return nil, fmt.Errorf("prop .Interfaces is %T, not map[string]map[string]dbus.Variant", signal.Body[1])
		}
		return &ObjectManagerInterfacesAddedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &ObjectManagerInterfacesAddedSignalBody{
				Object:     v0,
				Interfaces: v1,
			},
		}, nil
	case InterfaceObjectManager + "." + "InterfacesRemoved":
		v0, ok := signal.Body[0].(dbus.ObjectPath)
		if !ok {
			return nil, fmt.Errorf("prop .Object is %T, not dbus.ObjectPath", signal.Body[0])
		}
		v1, ok := signal.Body[1].([]string)
		if !ok {
			return nil, fmt.Errorf("prop .Interfaces is %T, not []string", signal.Body[1])
		}
		return &ObjectManagerInterfacesRemovedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &ObjectManagerInterfacesRemovedSignalBody{
				Object:     v0,
				Interfaces: v1,
			},
		}, nil
	default:
		return nil, ErrUnknownSignal
	}
}

// AddMatchSignal registers a match rule for the given signal,
// opts are appended to the automatically generated signal's rules.
func AddMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.AddMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// RemoveMatchSignal unregisters the previously registered subscription.
func RemoveMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.RemoveMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// Interface name constants.
const (
	InterfaceObjectManager = "org.freedesktop.DBus.ObjectManager"
)

// NewObjectManager creates and allocates org.freedesktop.DBus.ObjectManager.
func NewObjectManager(object dbus.BusObject) *ObjectManager {
	return &ObjectManager{object}
}

// ObjectManager implements org.freedesktop.DBus.ObjectManager D-Bus interface.
type ObjectManager struct {
	object dbus.BusObject
}

// GetManagedObjects calls org.freedesktop.DBus.ObjectManager.GetManagedObjects method.
func (o *ObjectManager) GetManagedObjects(ctx context.Context) (objects map[dbus.ObjectPath]map[string]map[string]dbus.Variant, err error) {
	err = o.object.CallWithContext(ctx, InterfaceObjectManager+".GetManagedObjects", 0).Store(&objects)
	return
}

// ObjectManagerInterfacesAddedSignal represents org.freedesktop.DBus.ObjectManager.InterfacesAdded signal.
type ObjectManagerInterfacesAddedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *ObjectManagerInterfacesAddedSignalBody
}

// Name returns the signal's name.
func (s *ObjectManagerInterfacesAddedSignal) Name() string {
	return "InterfacesAdded"
}

// Interface returns the signal's interface.
func (s *ObjectManagerInterfacesAddedSignal) Interface() string {
	return InterfaceObjectManager
}

// Sender returns the signal's sender unique name.
func (s *ObjectManagerInterfacesAddedSignal) Sender() string {
	return s.sender
}

func (s *ObjectManagerInterfacesAddedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *ObjectManagerInterfacesAddedSignal) values() []interface{} {
	return []interface{}{s.Body.Object, s.Body.Interfaces}
}

// ObjectManagerInterfacesAddedSignalBody is body container.
type ObjectManagerInterfacesAddedSignalBody struct {
	Object     dbus.ObjectPath
	Interfaces map[string]map[string]dbus.Variant
}

// ObjectManagerInterfacesRemovedSignal represents org.freedesktop.DBus.ObjectManager.InterfacesRemoved signal.
type ObjectManagerInterfacesRemovedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *ObjectManagerInterfacesRemovedSignalBody
}

// Name returns the signal's name.
func (s *ObjectManagerInterfacesRemovedSignal) Name() string {
	return "InterfacesRemoved"
}

// Interface returns the signal's interface.
func (s *ObjectManagerInterfacesRemovedSignal) Interface() string {
	return InterfaceObjectManager
}

// Sender returns the signal's sender unique name.
func (s *ObjectManagerInterfacesRemovedSignal) Sender() string {
	return s.sender
}

func (s *ObjectManagerInterfacesRemovedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *ObjectManagerInterfacesRemovedSignal) values() []interface{} {
	return []interface{}{s.Body.Object, s.Body.Interfaces}
}

// ObjectManagerInterfacesRemovedSignalBody is body container.
type ObjectManagerInterfacesRemovedSignalBody struct {
	Object     dbus.ObjectPath
	Interfaces []string
}
